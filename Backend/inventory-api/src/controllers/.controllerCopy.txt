// import { Request, Response } from "express";
// import { where } from "sequelize";
// import User from "../db/models/user";
// import path from "path";
// import fs from "fs";
// import fileUpload, { UploadedFile } from 'express-fileupload';
// import fastcsv from 'fast-csv'

// async function uploadCsv(filePath: string, res: Response) {
//     const stream = fs.createReadStream(filePath);
//     const csvDataColl: any[] = [];

//     stream
//         .pipe(fastcsv.parse({ headers: true })) // Gunakan headers: true jika baris pertama adalah header
//         .on('data', (data) => {
//             csvDataColl.push(data);
//         })
//         .on('end', async () => {
//             try {
//                 // Masukkan data dari CSV ke model User
//                 const result = await User.bulkCreate(csvDataColl);

//                 console.log(`Data inserted into User successfully`);

//                 return res.status(200).json({ message: 'File uploaded and data inserted into database successfully' });
//             } catch (error) {
//                 console.error('Error:', error);
//                 return res.status(500).json({ error: 'Internal server error' });
//             }
//         });
// }

// const UserController = {
    
//     getTest: async (req: Request, res: Response) => {
//         const indexPath = path.join(__dirname, '..', 'index.html');
//         return res.status(200).sendFile(indexPath);
//     },
//     saveData: async (req: Request, res: Response) => {
//         const uploadedFile = req.files?.file as UploadedFile | undefined;

//     if (!uploadedFile) {
//         return res.status(400).json({ error: 'No file uploaded' });
//     }

//     // Dapatkan ekstensi file
//     const ext = path.extname(uploadedFile.name);
//     const fileName = path.basename(uploadedFile.name, ext)
//     const currentTime = new Date();
//     const hours = String(currentTime.getHours()).padStart(2, '0');
//     const minutes = String(currentTime.getMinutes()).padStart(2, '0');
//     const timeString = `${hours}-${minutes}`;

//     // Buat nama unik untuk file dengan menggabungkan tanggal dan ekstensi
//     const uniqueFileName = `${fileName}_${currentTime.toISOString().split('T')[0]}_${timeString}${ext}`;

//     // Buat path lengkap untuk menyimpan file
//     const filePath = `./public/files/${uniqueFileName}`;

//     // Simpan file ke server menggunakan fs
//     uploadedFile.mv(filePath, (err) => {
//         if (err) {
//             return res.status(500).json({ error: err });
//         }

//         console.log(`File saved as ${filePath}`);

//         // Lakukan operasi lain dengan file yang diunggah di sini
//         uploadCsv(filePath, res);

//         return res.status(200).json({ message: 'File uploaded successfully' });
//     });
//     },
//   };
  
//   export default UserController;

import { Request, Response } from "express";
import User from "../db/models/user";
import path from "path";
import fs from "fs";
import { UploadedFile } from "express-fileupload";
import fastcsv from "fast-csv";

async function uploadCsv(filePath: string, res: Response) {
    const stream = fs.createReadStream(filePath);
    const csvDataColl: any[] = [];

    stream
        .pipe(fastcsv.parse({ headers: true })) // Gunakan headers: true jika baris pertama adalah header
        .on("data", (data) => {
            csvDataColl.push(data);
        })
        .on("end", async () => {
            try {
                // Masukkan data dari CSV ke model User
                const result = await User.bulkCreate(csvDataColl);

                console.log(`Data inserted into User successfully`);

                return res
                    .status(200)
                    .json({ message: "File uploaded and data inserted into database successfully" });
            } catch (error) {
                console.error("Error:", error);
                return res.status(500).json({ error: "Internal server error" });
            }
        });
}

const UserController = {
    getTest: async (req: Request, res: Response) => {
        const indexPath = path.join(__dirname, "..", "index.html");
        return res.status(200).sendFile(indexPath);
    },
    saveData: async (req: Request, res: Response) => {
        const uploadedFile = req.files?.file as UploadedFile | undefined;

        if (!uploadedFile) {
            return res.status(400).json({ error: "No file uploaded" });
        }

        // Dapatkan ekstensi file
        const ext = path.extname(uploadedFile.name);
        const fileName = path.basename(uploadedFile.name, ext);
        const currentTime = new Date();
        const hours = String(currentTime.getHours()).padStart(2, "0");
        const minutes = String(currentTime.getMinutes()).padStart(2, "0");
        const timeString = `${hours}-${minutes}`;

        // Buat nama unik untuk file dengan menggabungkan tanggal dan ekstensi
        const uniqueFileName = `${fileName}_${currentTime.toISOString().split("T")[0]}_${timeString}${ext}`;

        // Periksa ekstensi file (pastikan ini adalah file CSV)
        if (ext !== ".csv") {
            return res.status(400).json({ error: "Invalid file type. Only CSV files are allowed." });
        }

        // Buat path lengkap untuk menyimpan file
        const filePath = `./public/files/${uniqueFileName}`;

        // Simpan file ke server menggunakan fs
        uploadedFile.mv(filePath, (err) => {
            if (err) {
                return res.status(500).json({ error: err });
            }

            console.log(`File saved as ${filePath}`);

            // Lakukan operasi lain dengan file yang diunggah di sini
            uploadCsv(filePath, res);
        });
    },
};

export default UserController;
