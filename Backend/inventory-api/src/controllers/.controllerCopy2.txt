// import { Request, Response } from "express";
// import User from "../db/models/user";
// import Vendor from "../db/models/vendor";
// import path from "path";
// import fs from "fs";
// import { UploadedFile } from "express-fileupload";
// import xlsx from "xlsx";

// const UserController = {
//     getTest: async (req: Request, res: Response) => {
//         const indexPath = path.join(__dirname, "..", "index.html");
//         return res.status(200).sendFile(indexPath);
//     },
//     getData: async (req: Request, res: Response) => {
//         try {
//             const response = await User.findAll();
//             res.json(response);
//         } catch (error) {
//             console.log(error);
//         }
//     },
//     saveData: async (req: Request, res: Response) => {
//         const uploadedFile = req.files?.file as UploadedFile | undefined;

//         if (!uploadedFile) {
//             return res.status(400).json({ error: "No file uploaded" });
//         }

//         // Dapatkan ekstensi file
//         const ext = path.extname(uploadedFile.name);
//         const fileName = path.basename(uploadedFile.name, ext);
//         const currentTime = new Date();
//         const hours = String(currentTime.getHours()).padStart(2, "0");
//         const minutes = String(currentTime.getMinutes()).padStart(2, "0");
//         const timeString = `${hours}-${minutes}`;

//         // Buat nama unik untuk file dengan menggabungkan tanggal dan ekstensi
//         const uniqueFileName = `${fileName}_${currentTime.toISOString().split("T")[0]
//             }_${timeString}${ext}`;

//         // Buat path lengkap untuk menyimpan file
//         const filePath = `./public/files/${uniqueFileName}`;

//         // Simpan file ke server menggunakan fs
//         uploadedFile.mv(filePath, async (err) => {
//             if (err) {
//                 return res.status(500).json({ error: err });
//             }

//             console.log(`File saved as ${filePath}`);

//             // Baca file Excel yang baru saja diunggah
//             const workbook = xlsx.readFile(filePath);

//             // Assuming that the first sheet in the Excel file contains the data
//             const sheetName = workbook.SheetNames[0];
//             const sheet = workbook.Sheets[sheetName];

//             // Convert the sheet to JSON
//             // const jsonData = xlsx.utils.sheet_to_json(sheet) as User[];
//             // const jsonData = xlsx.utils.sheet_to_json(sheet);
//             const jsonData: any[] = xlsx.utils.sheet_to_json(sheet);
//             const jsonDataUser = xlsx.utils.sheet_to_json(sheet) as User[];
//             const jsonDataVendor = xlsx.utils.sheet_to_json(sheet) as Vendor[];

//             // const jsonDataUser = jsonData.filter((data) =>
//             //     data.hasOwnProperty("firstName")
//             // ) as User[];
//             // const jsonDataVendor = jsonData.filter((data) =>
//             //     data.hasOwnProperty("namaVendor")
//             // ) as Vendor[];

            
//             let userPromises: any[]=[]
//             let vendorPromises: any[]=[]
//             async function inputData() {
//                 try {
//                     userPromises = jsonDataUser.map(async (data) => {
//                         try {
//                             await User.create({
//                                 firstName: data.firstName,
//                                 lastName: data.lastName,
//                                 nik: data.nik,
//                             });
//                         } catch (error) {
//                             console.error("Error inserting data into User:", error);
//                             // Handle any errors that occur during insertion
//                             throw new Error("Error inserting data into the User table");
//                         }
//                     });
        
//                     vendorPromises = jsonDataVendor.map(async (data) => {
//                         if (data.hasOwnProperty("namaVendor")) {
//                             try {
//                                 await Vendor.create({
//                                     namaVendor: data.namaVendor,
//                                     kodeVendor: data.kodeVendor,
//                                 });
//                             } catch (error) {
//                                 console.error("Error inserting data into Vendor:", error);
//                                 // Handle any errors that occur during insertion
//                                 throw new Error("Error inserting data into the Vendor table");
//                             }
//                         }
//                     });
//                 } catch (error) {
                    
//                 }

                
//             }

//             const propertiesToCheck = ["firstName", "lastName", "nik", "namaVendor", "kodeVendor", /* tambahkan properti lainnya */];
//             jsonData.map(async (data)=>{
//                 try {
//                     if (propertiesToCheck.every(prop => data.hasOwnProperty(prop))) {
//                         // Semua properti yang Anda periksa ada dalam objek data
//                         // Lakukan sesuatu dengan objek data di sini
//                         inputData()
//                     } else {
//                         console.log('data tidak lengkap');
                        
//                         // Salah satu atau lebih properti yang Anda periksa tidak ada dalam objek data
//                         // Lakukan penanganan kesalahan atau tindakan lain sesuai kebutuhan Anda
//                     }
//                 } catch (error) {
                    
//                 }
//             })



//             // const userPromises = jsonDataUser.map(async (data) => {
//             //     if (data.hasOwnProperty("firstName")) {
//             //       // Data untuk tabel User
//             //     //   return User.create({
//             //     //     firstName: data.firstName,
//             //     //     lastName: data.lastName,
//             //     //     nik: data.nik,
//             //     //   });
//             //     }
//             //     return null;
//             //   });

//             //   const vendorPromises = jsonDataVendor.map(async (data) => {
//             //     if (data.hasOwnProperty("namaVendor")) {
//             //       // Data untuk tabel Vendor
//             //     //   console.log(data.kodeVendor);

//             //       return Vendor.create({
//             //         namaVendor: data.namaVendor,
//             //         kodeVendor: data.kodeVendor,
//             //       });
//             //     }
//             //     return null;
//             //   });

//             // const userPromises = jsonData.map(async (userData) => {
//             //     try {
//             //         await User.create({
//             //             firstName: userData.firstName,
//             //             lastName: userData.lastName,
//             //             nik: userData.nik,
//             //         });
//             //     } catch (error) {
//             //         console.error("Error inserting data:", error);
//             //         // Handle any errors that occur during insertion
//             //         throw new Error("Error inserting data into the database");
//             //     }
//             // });
//             const allPromises = [...userPromises, ...vendorPromises].filter(
//                 (promise) => promise !== null
//             );

//             try {
//                 // Tunggu semua operasi pembuatan entri selesai
//                 await Promise.all(allPromises);
//                 // await Promise.all(userPromises);

//                 res
//                     .status(200)
//                     .json({
//                         message:
//                             "File uploaded and data inserted into the database successfully",
//                     });
//             } catch (error) {
//                 return res.status(500).json(error);
//             }
//         });
//     },
// };

// export default UserController;

import { Request, Response } from "express";
import User from "../db/models/user";
import Vendor from "../db/models/vendor";
import path from "path";
import fs from "fs";
import { UploadedFile } from "express-fileupload";
import xlsx from "xlsx";

const UserController = {
    getTest: async (req: Request, res: Response) => {
        const indexPath = path.join(__dirname, "..", "index.html");
        return res.status(200).sendFile(indexPath);
    },
    getData: async (req: Request, res: Response) => {
        try {
            const response = await User.findAll();
            res.json(response);
        } catch (error) {
            console.log(error);
        }
    },
    saveData: async (req: Request, res: Response) => {
        const uploadedFile = req.files?.file as UploadedFile | undefined;

        if (!uploadedFile) {
            return res.status(400).json({ error: "No file uploaded" });
        }

        // Dapatkan ekstensi file
        const ext = path.extname(uploadedFile.name);
        const fileName = path.basename(uploadedFile.name, ext);
        const currentTime = new Date();
        const hours = String(currentTime.getHours()).padStart(2, "0");
        const minutes = String(currentTime.getMinutes()).padStart(2, "0");
        const timeString = `${hours}-${minutes}`;

        // Buat nama unik untuk file dengan menggabungkan tanggal dan ekstensi
        const uniqueFileName = `${fileName}_${currentTime.toISOString().split("T")[0]
            }_${timeString}${ext}`;

        // Buat path lengkap untuk menyimpan file
        const filePath = `./public/files/${uniqueFileName}`;

        // Simpan file ke server menggunakan fs
        uploadedFile.mv(filePath, async (err) => {
            if (err) {
                return res.status(500).json({ error: err });
            }

            console.log(`File saved as ${filePath}`);

            // Baca file Excel yang baru saja diunggah
            const workbook = xlsx.readFile(filePath);

            // Assuming that the first sheet in the Excel file contains the data
            const sheetName = workbook.SheetNames[0];
            const sheet = workbook.Sheets[sheetName];

            // Convert the sheet to JSON
            const jsonData: any[] = xlsx.utils.sheet_to_json(sheet);
            const jsonDataUser = xlsx.utils.sheet_to_json(sheet) as User[];
            const jsonDataVendor = xlsx.utils.sheet_to_json(sheet) as Vendor[];

            async function inputData() {
                const userPromises = jsonDataUser.map(async (data) => {
                    try {
                        await User.create({
                            firstName: data.firstName,
                            lastName: data.lastName,
                            nik: data.nik,
                        });
                    } catch (error) {
                        console.error("Error inserting data into User:", error);
                        // Handle any errors that occur during insertion
                        throw new Error("Error inserting data into the User table");
                    }
                });

                const vendorPromises = jsonDataVendor.map(async (data) => {
                    if (data.hasOwnProperty("namaVendor")) {
                        try {
                            await Vendor.create({
                                namaVendor: data.namaVendor,
                                kodeVendor: data.kodeVendor,
                            });
                        } catch (error) {
                            console.error("Error inserting data into Vendor:", error);
                            // Handle any errors that occur during insertion
                            throw new Error("Error inserting data into the Vendor table");
                        }
                    }
                });

                // Tunggu semua operasi pembuatan entri selesai
                await Promise.all([...userPromises, ...vendorPromises]);
            }

            const propertiesToCheck = ["firstName", "lastName", "nik", "namaVendor", "kodeVendor" /* tambahkan properti lainnya */];
            const isDataValid = jsonData.every((data) => propertiesToCheck.every((prop) => data.hasOwnProperty(prop)));

            if (isDataValid) {
                try {
                    await inputData();
                    res.status(200).json({
                        message: "File uploaded and data inserted into the database successfully",
                    });
                } catch (error) {
                    return res.status(500).json(error);
                }
            } else {
                console.log("Data is incomplete");
                fs.unlink(filePath, (err) => {
                    if (err) throw err;
                    console.log(`${filePath} was deleted`);
                });
                return res.status(400).json({ error: "Data is incomplete" });
                
            }
        });
    },
};

export default UserController;

