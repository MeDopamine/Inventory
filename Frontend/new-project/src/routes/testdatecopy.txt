import React, { useState, useEffect } from 'react';
import { classNames } from 'primereact/utils';
import { FilterMatchMode, FilterOperator } from 'primereact/api';
import { DataTable } from 'primereact/datatable';
import { Column } from 'primereact/column';
import { InputText } from 'primereact/inputtext';
import { Dropdown } from 'primereact/dropdown';
import { InputNumber } from 'primereact/inputnumber';
import { Button } from 'primereact/button';
import { ProgressBar } from 'primereact/progressbar';
import { Calendar } from 'primereact/calendar';
import { MultiSelect } from 'primereact/multiselect';
import { Slider } from 'primereact/slider';
import { Tag } from 'primereact/tag';
import { TriStateCheckbox } from 'primereact/tristatecheckbox';

export default function AdvancedFilterDemo() {
    const [customers, setCustomers] = useState(null);
    const [filters, setFilters] = useState(null);
    const [loading, setLoading] = useState(false);
    const [globalFilterValue, setGlobalFilterValue] = useState('');
    console.log(filters);

    const getSeverity = (status) => {
        switch (status) {
            case 'unqualified':
                return 'danger';

            case 'qualified':
                return 'success';

            case 'new':
                return 'info';

            case 'negotiation':
                return 'warning';

            case 'renewal':
                return null;
        }
    };

    useEffect(() => {
        fetchData();
        setLoading(false);
    }, []);

    const fetchData = async () => {
        try {
            const response = await fetch(`http://localhost:4000/api/v1/inventory/data`);
            const jsonData = await response.json();
            // console.log(jsonData);
            const dataWithAdditionalFormattedData  = jsonData.map((item) => {
                const tanggalGr = new Date(item.tanggalGr);
                const tanggalGi = new Date(item.tanggalGi);
                // const tanggalPo = new Date(item.tanggalPo);
                const selisihTanggal = Math.abs(tanggalGr - tanggalGi) / (1000 * 60 * 60 * 24); // Selisih dalam hari
                const DOI = `${selisihTanggal} Hari` // Selisih dalam hari
                return { 
                    ...item,
                    DOI,
                    // tanggalGr,
                    // tanggalGi,
                    // tanggalPo
                };
            });

            // const dataWithAdditionalFormattedData = jsonData.map((item) => {
            //     const { tanggalPo } = item;
            //     const tanggalGr = new Date(item.tanggalGr);
            //     const tanggalGi = new Date(item.tanggalGi);
            //     const selisihTanggal = Math.abs(tanggalGr - tanggalGi) / (1000 * 60 * 60 * 24); // Selisih dalam hari
            //     const DOI = `${selisihTanggal} Hari` // Selisih dalam hari
            
            //     return {
            //         ...item,
            //         tanggalPo: new Date(tanggalPo),
            //         tanggalGr: new Date(tanggalGr),
            //         tanggalGi: new Date(tanggalGi),
            //         DOI, // Tambahkan selisih tanggal ke objek data
            //     };
            // });
            
    
            setCustomers(dataWithAdditionalFormattedData);
            // setData(jsonData);
        } catch (error) {
            console.log("Error fetching data:", error);
        }
    }; 
    const getCustomers = (data) => {
        return [...(data || [])].map((d) => {
            d.date = new Date(d.date);

            return d;
        });
    };

    // const formatDate = (value) => {
    //     return value.toLocaleDateString('en-US', {
    //         day: '2-digit',
    //         month: '2-digit',
    //         year: 'numeric'
    //     });
    // };
    const formatDate = (value) => {
        if (!value) return ''; // Handle null or undefined values
        const formattedDate = new Date(value);
        return formattedDate.toLocaleDateString('en-US', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
    };
    // return `${formattedDate.getMonth() + 1}/${formattedDate.getDate()}/${formattedDate.getFullYear()}`;
    const dateBodyTemplate = (rowData) => {
        return formatDate(rowData.tanggalPo);
    };

    const formatCurrency = (value) => {
        return value.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
    };

    const clearFilter = () => {
        initFilters();
    };

    const onGlobalFilterChange = (e) => {
        const value = e.target.value;
        let _filters = { ...filters };

        _filters['global'].value = value;

        setFilters(_filters);
        setGlobalFilterValue(value);
    };

    const initFilters = () => {
        setFilters({
            global: { value: null, matchMode: FilterMatchMode.CONTAINS },
            name: { operator: FilterOperator.AND, constraints: [{ value: null, matchMode: FilterMatchMode.STARTS_WITH }] },
            'country.name': { operator: FilterOperator.AND, constraints: [{ value: null, matchMode: FilterMatchMode.STARTS_WITH }] },
            representative: { value: null, matchMode: FilterMatchMode.IN },
            date: { operator: FilterOperator.AND, constraints: [{ value: null, matchMode: FilterMatchMode.DATE_IS }] }, // Include the "Date" filter
            balance: { operator: FilterOperator.AND, constraints: [{ value: null, matchMode: FilterMatchMode.EQUALS }] },
            status: { operator: FilterOperator.OR, constraints: [{ value: null, matchMode: FilterMatchMode.EQUALS }] },
            activity: { value: null, matchMode: FilterMatchMode.BETWEEN },
            verified: { value: null, matchMode: FilterMatchMode.EQUALS }
        });
        setGlobalFilterValue('');
    };

    const renderHeader = () => {
        return (
            <div className="flex justify-content-between">
                <Button type="button" icon="pi pi-filter-slash" label="Clear" outlined onClick={clearFilter} />
                <span className="p-input-icon-left">
                    <i className="pi pi-search" />
                    <InputText value={globalFilterValue} onChange={onGlobalFilterChange} placeholder="Keyword Search" />
                </span>
            </div>
        );
    };

    const countryBodyTemplate = (rowData) => {
        return (
            <div className="flex align-items-center gap-2">
                <img alt="flag" src="https://primefaces.org/cdn/primereact/images/flag/flag_placeholder.png" className={`flag flag-${rowData.country.code}`} style={{ width: '24px' }} />
                <span>{rowData.country.name}</span>
            </div>
        );
    };

    const filterClearTemplate = (options) => {
        return <Button type="button" icon="pi pi-times" onClick={options.filterClearCallback} severity="secondary"></Button>;
    };

    const filterApplyTemplate = (options) => {
        return <Button type="button" icon="pi pi-check" onClick={options.filterApplyCallback} severity="success"></Button>;
    };

    const filterFooterTemplate = () => {
        return <div className="px-3 pt-0 pb-3 text-center">Filter by Country</div>;
    };

    const representativeBodyTemplate = (rowData) => {
        const representative = rowData.representative;

        return (
            <div className="flex align-items-center gap-2">
                <img alt={representative.name} src={`https://primefaces.org/cdn/primereact/images/avatar/${representative.image}`} width="32" />
                <span>{representative.name}</span>
            </div>
        );
    };

    const representativeFilterTemplate = (options) => {
        return <MultiSelect value={options.value} options={representatives} itemTemplate={representativesItemTemplate} onChange={(e) => options.filterCallback(e.value)} optionLabel="name" placeholder="Any" className="p-column-filter" />;
    };

    const representativesItemTemplate = (option) => {
        return (
            <div className="flex align-items-center gap-2">
                <img alt={option.name} src={`https://primefaces.org/cdn/primereact/images/avatar/${option.image}`} width="32" />
                <span>{option.name}</span>
            </div>
        );
    };

    // const dateBodyTemplate = (rowData) => {
    //     return formatDate(rowData.tanggalPo);
    // };

    const dateFilterTemplate = (options) => {
        return <Calendar value={options.value} onChange={(e) => options.filterCallback(e.value, options.index)} dateFormat="mm/dd/yy" placeholder="mm/dd/yyyy" mask="99/99/9999" />;
    };

    const balanceBodyTemplate = (rowData) => {
        return formatCurrency(rowData.balance);
    };

    const balanceFilterTemplate = (options) => {
        return <InputNumber value={options.value} onChange={(e) => options.filterCallback(e.value, options.index)} mode="currency" currency="USD" locale="en-US" />;
    };

    const statusBodyTemplate = (rowData) => {
        return <Tag value={rowData.status} severity={getSeverity(rowData.status)} />;
    };

    const statusFilterTemplate = (options) => {
        return <Dropdown value={options.value} options={statuses} onChange={(e) => options.filterCallback(e.value, options.index)} itemTemplate={statusItemTemplate} placeholder="Select One" className="p-column-filter" showClear />;
    };

    const statusItemTemplate = (option) => {
        return <Tag value={option} severity={getSeverity(option)} />;
    };

    const activityBodyTemplate = (rowData) => {
        return <ProgressBar value={rowData.activity} showValue={false} style={{ height: '6px' }}></ProgressBar>;
    };

    const activityFilterTemplate = (options) => {
        return (
            <React.Fragment>
                <Slider value={options.value} onChange={(e) => options.filterCallback(e.value)} range className="m-3"></Slider>
                <div className="flex align-items-center justify-content-between px-2">
                    <span>{options.value ? options.value[0] : 0}</span>
                    <span>{options.value ? options.value[1] : 100}</span>
                </div>
            </React.Fragment>
        );
    };

    const verifiedBodyTemplate = (rowData) => {
        return <i className={classNames('pi', { 'text-green-500 pi-check-circle': rowData.verified, 'text-red-500 pi-times-circle': !rowData.verified })}></i>;
    };

    const verifiedFilterTemplate = (options) => {
        return (
            <div className="flex align-items-center gap-2">
                <label htmlFor="verified-filter" className="font-bold">
                    Verified
                </label>
                <TriStateCheckbox inputId="verified-filter" value={options.value} onChange={(e) => options.filterCallback(e.value)} />
            </div>
        );
    };

    const header = renderHeader();

    return (
        <div className="card">
            <DataTable value={customers} paginator showGridlines rows={10} loading={loading} dataKey="id" 
                    filters={filters} globalFilterFields={['name', 'country.name', 'representative.name', 'balance', 'status']} header={header}
                    emptyMessage="No customers found.">
                {/* <Column header="Date" field='tanggalPo' filterField="date" dataType="date" style={{ minWidth: '10rem' }} filter filterElement={dateFilterTemplate} /> */}
                <Column header="Date" field='tanggalPo' filterField="date" dataType="date" style={{ minWidth: '10rem' }} body={dateBodyTemplate} filter filterElement={dateFilterTemplate} />
            </DataTable>
        </div>
    );
}

//v2 bisa filter date 

import React, { useState, useEffect } from 'react';
import { InputText } from 'primereact/inputtext';
import { Button } from 'primereact/button';
import { Calendar } from 'primereact/calendar';
import { DataTable } from 'primereact/datatable';
import { Column } from 'primereact/column';
import { FilterMatchMode, FilterOperator } from 'primereact/api';

export default function AdvancedFilterDemo() {
    const [customers, setCustomers] = useState(null);
    const [filters, setFilters] = useState(null);
    const [loading, setLoading] = useState(false);
    const [globalFilterValue, setGlobalFilterValue] = useState('');

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await fetch(`http://localhost:4000/api/v1/inventory/data`);
                const jsonData = await response.json();
                const formatDate = (value) => {
                    const date = new Date(value);
                    const options = {
                        weekday: 'short',
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit',
                        second: '2-digit',
                        timeZoneName: 'short',
                    };
                    return date.toLocaleString('en-US', options);
                };
                
                // Mengubah format tanggal dalam data
                const formattedData = jsonData.map((item) => ({
                    ...item,
                    namaProjek: item.namaProjek+"/test",
                    tanggalPo: new Date(formatDate(item.tanggalPo))
                    // tanggalPo: formatDate(item.tanggalPo)
                }));
    
                setCustomers(formattedData);
                // setCustomers(jsonData);
            } catch (error) {
                console.log("Error fetching data:", error);
            }
        };
    
        fetchData();
        setLoading(false);
        initFilters();
    }, []);
    // console.log(customers);

    const clearFilter = () => {
        initFilters();
    };

    const onGlobalFilterChange = (e) => {
        const value = e.target.value;
        let _filters = { ...filters };
        _filters['global'].value = value;
        setFilters(_filters);
        setGlobalFilterValue(value);
    };

    const initFilters = () => {
        setFilters({
            global: { value: null, matchMode: FilterMatchMode.CONTAINS },
            namaProjek: { operator: FilterOperator.AND, constraints: [{ value: null, matchMode: FilterMatchMode.STARTS_WITH }] },
            tanggalPo: { operator: FilterOperator.AND, constraints: [{ value: null, matchMode: FilterMatchMode.DATE_IS }] },
        });
        setGlobalFilterValue('');
    };
    // console.log(filters);

    // const formatDate = (value) => {
    //     return value.toLocaleDateString('en-US', {
    //         day: '2-digit',
    //         month: '2-digit',
    //         year: 'numeric'
    //     });
    // };

    // const formatDate = (value) => {
    //     const date = new Date(value);
    //     const options = {
    //         weekday: 'short',
    //         year: 'numeric',
    //         month: 'short',
    //         day: 'numeric',
    //         timeZoneName: 'short',
    //     };
    //     return date.toLocaleString('en-US', options);
    // };

    const formatDate = (value) => {
        console.log(value);
    
        return value.toLocaleDateString("en-US", {
          day: "2-digit",
          month: "2-digit",
          year: "numeric"
        });
      };
    
    // const dateBodyTemplate = (rowData) => {
    //     return formatDate(rowData.tanggalPo);
    // };
    const dateBodyTemplate = (rowData) => {
        console.log(formatDate(rowData.tanggalPo));
        console.log(typeof rowData.tanggalPo);
    
        return formatDate(rowData.tanggalPo);
    };
    // const dateBodyTemplate = (rowData) => {
    //     if (rowData.tanggalPo) {
    //         console.log(rowData.tanggalPo);
    //         console.log(typeof rowData.tanggalPo);
    //         // Parsing tanggal dari format 'yyyy-mm-dd'
    //         // const parts = rowData.tanggalPo.split('-');
    //         // const year = parseInt(parts[0], 10);
    //         // const month = parseInt(parts[1], 10) - 1; // Bulan dimulai dari 0 (0 = Januari, 1 = Februari, dst.)
    //         // const day = parseInt(parts[2], 10);
    
    //         // const date = new Date(year, month, day);
    //         const date = new Date(rowData.tanggalPo);
    //         // console.log( formatDate(date));
    //         return formatDate(date)
            
    //         // return formatDate(rowData.tanggalPo);
            
    //         // return formatDate(date);
    //     } else {
    //         return ""; // Atau tampilkan teks kosong jika rowData.tanggalPo kosong
    //     }
    // };

    const nameBodyTemplate = (rowData) => {
        if (rowData.namaProjek) {
            // console.log(rowData.namaProjek);
            return rowData.namaProjek+'/ea'
        }
    }
    
    
    // const dateFilterTemplate = (options) => {
    //     console.log(options.value);
    //     return <Calendar value={options.value} onChange={(e) => options.filterCallback(e.value, options.index)} dateFormat="dd/mm/yy" placeholder="" mask="99/99/9999" />;
    // };
    const dateFilterTemplate = (options) => {
        // console.log(options.value);
        return (
          <Calendar
            value={options.value}
            onChange={(e) => options.filterCallback(e.value, options.index)}
            dateFormat="mm/dd/yy"
            placeholder="mm/dd/yyyy"
            mask="99/99/9999"
          />
        );
      };

    const renderHeader = () => {
        return (
            <div className="flex justify-content-between">
                <Button type="button" icon="pi pi-filter-slash" label="Clear" outlined onClick={clearFilter} />
                <span className="p-input-icon-left">
                    <i className="pi pi-search" />
                    <InputText value={globalFilterValue} onChange={onGlobalFilterChange} placeholder="Keyword Search" />
                </span>
            </div>
        );
    };

    const header = renderHeader();

    return (
        <div className="card">
            <DataTable value={customers} paginator showGridlines rows={10} loading={loading} dataKey="id" 
                    filters={filters} globalFilterFields={['namaProjek', 'tanggalPo']} header={header}
                    emptyMessage="No customers found.">
                <Column field='namaProjek'  header="Name" filter filterPlaceholder="Search by name" body={nameBodyTemplate} style={{ minWidth: '12rem' }} />
                {/* <Column  header="Name" filter filterPlaceholder="Search by name" body={(rowData) => rowData.namaProjek} style={{ minWidth: '12rem' }} /> */}
                <Column header="Tanggal PO" filterField="tanggalPo" dataType="date" style={{ minWidth: '10rem' }} body={dateBodyTemplate} filter filterElement={dateFilterTemplate} />
                {/* <Column header="Date" filterField="date" dataType="date" style={{ minWidth: '10rem' }} body={dateBodyTemplate} filter filterElement={dateFilterTemplate} /> */}
                {/* <Column  header="Name" filter filterPlaceholder="Search by name" body={(rowData) => {{return rowData.namaProjek + '/test' }} } style={{ minWidth: '12rem' }} /> */}
                {/* <Column field="tanggalPo" header="Date" filterField="date" dataType="date" body={(rowData) => rowData.tanggalPo} style={{ minWidth: '10rem' }}  filter filterElement={dateFilterTemplate} /> */}
            </DataTable>
        </div>
    );
}



